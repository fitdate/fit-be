services:
  app-blue:
    container_name: fit-blue
    image: ${DOCKER_USERNAME}/fit-be:latest
    restart: unless-stopped
    ports:
      - '3000:3000'
    env_file:
      - blue/.env.blue
    environment:
      - APP_PORT=3000
      - REDIS_HOST=redis-blue
      - REDIS_PORT=6379
      - NODE_ENV=production
      - ENV_FILE=.env.blue
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - redis-network
      - postgres-network
    depends_on:
      redis-blue:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 20s

  app-green:
    container_name: fit-green
    image: ${DOCKER_USERNAME}/fit-be:latest
    restart: unless-stopped
    ports:
      - '3001:3000'
    env_file:
      - green/.env.green
    environment:
      - APP_PORT=3001
      - REDIS_HOST=redis-green
      - REDIS_PORT=6379
      - NODE_ENV=production
      - ENV_FILE=.env.green
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - redis-network
      - postgres-network
    depends_on:
      redis-green:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 20s

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_USER=ubuntu
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=fit
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ubuntu -d fit']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis-blue:
    container_name: redis-blue
    image: redis:latest
    ports:
      - '6379:6379'
    networks:
      - redis-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 20s

  redis-green:
    container_name: redis-green
    image: redis:latest
    ports:
      - '6380:6379'
    networks:
      - redis-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 20s

networks:
  redis-network:
    driver: bridge
  postgres-network:
    driver: bridge

volumes:
  postgres_data:
