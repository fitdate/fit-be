services:
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - fit-network
    restart: unless-stopped
    depends_on:
      - app-blue
      - app-green
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  app-blue:
    container_name: fit-blue
    image: ${DOCKER_USERNAME}/fit-be:latest
    restart: unless-stopped
    ports:
      - '3000:3000'
    env_file:
      - blue/.env.blue
    environment:
      - APP_PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
      - ENV_FILE=.env.blue
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - fit-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 3s
        order: start-first

  app-green:
    container_name: fit-green
    image: ${DOCKER_USERNAME}/fit-be:latest
    restart: unless-stopped
    ports:
      - '3001:3000'
    env_file:
      - green/.env.green
    environment:
      - APP_PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
      - ENV_FILE=.env.green
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - fit-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 3s
        order: start-first

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_USER=ubuntu
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=fit
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fit-network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'ubuntu', '-d', 'fit']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server --maxmemory 900mb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - fit-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1

volumes:
  postgres_data:
  redis_data:

networks:
  fit-network:
    name: fit-network
    driver: bridge
