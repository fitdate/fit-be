name: Deploy Backend Application

on:
  push:
    branches: [main, develop]
    paths:
      - '**'
      - '.github/workflows/**'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            dist
            .next
            build
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH and Create .env
        run: |
          # SSH 설정
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          # .env 파일 생성
          echo "===== .env 파일 생성 ====="
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env 파일 생성 완료"

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          echo "===== 배포 프로세스 시작 ====="

          # 현재 실행 중인 포트 확인
          echo "현재 실행 중인 포트 확인 중..."
          CURRENT_PORT=$(ssh $USERNAME@$HOST "curl -s localhost/port")
          echo "현재 실행 중인 포트: $CURRENT_PORT"

          # Blue/Green 환경 설정
          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT="$GREEN_PORT"
            NEW_ENV="green"
            CURRENT_ENV="blue"
          else
            NEW_PORT="$BLUE_PORT"
            NEW_ENV="blue"
            CURRENT_ENV="green"
          fi

          echo "배포 대상 환경: $NEW_ENV (포트: $NEW_PORT)"
          echo "현재 실행 환경: $CURRENT_ENV"

          # rsync를 사용한 효율적인 파일 전송
          echo "===== 파일 전송 시작 ====="
          echo "대상 디렉토리: ~/fit-$NEW_ENV"
          ssh $USERNAME@$HOST "mkdir -p ~/fit-$NEW_ENV"
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'dist' \
            ./ $USERNAME@$HOST:~/fit-$NEW_ENV/

          # 배포 실행
          echo "===== 애플리케이션 배포 시작 ====="
          ssh $USERNAME@$HOST "
            cd ~/fit-$NEW_ENV &&\
            echo '1. 의존성 설치 중...' &&\
            npm ci --prefer-offline &&\
            echo '2. 프로젝트 빌드 중...' &&\
            npm run build --if-present &&\
            echo '3. PM2로 새로운 버전 실행 중...' &&\
            pm2 delete fit-$NEW_ENV 2>/dev/null || true &&\
            APP_PORT=$NEW_PORT pm2 start dist/main.js --name fit-$NEW_ENV --update-env &&\
            
            echo '4. Nginx 설정 업데이트 중...' &&\
            sudo sh -c '
              rm -f /etc/nginx/sites-enabled/fit-$CURRENT_ENV &&\
              ln -sf /etc/nginx/sites-available/fit-$NEW_ENV /etc/nginx/sites-enabled/ &&\
              nginx -t && systemctl reload nginx
            ' &&\
            
            echo '5. 이전 버전 정리' &&\
            pm2 delete fit-$CURRENT_ENV 2>/dev/null || true &&\
            echo '===== 배포 완료 ====='"
