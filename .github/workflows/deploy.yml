name: Deploy Backend Application

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'nginx-config/**'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 📦 코드 체크아웃
      - name: 📦 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 🔧 Node.js 설정
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # 🔐 DockerHub 로그인
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 💾 Docker 캐시 설정
      - name: 💾 Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 🏗️ Docker Buildx 설정
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 🔑 SSH 키 설치
      - name: 🔑 Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 🔐 SSH 설정 및 .env 생성
      - name: 🔐 Configure SSH and Create .env
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "ServerAliveInterval 30" >> ~/.ssh/config
          echo "${{ secrets.ENV_FILE }}" > .env

      # 🐳 Docker 이미지 빌드 및 푸시
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fit-be:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/fit-be:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          load: true

      # ♻️ Docker 캐시 이동
      - name: ♻️ Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 🧪 DB 서버 상태 확인
      - name: 🧪 Check Database Server Status
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.DB_HOST }} \
          "systemctl status postgresql || echo 'PostgreSQL service not found'"

      # 🔗 DB 연결 테스트
      - name: 🔗 Test Database Connection
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: fit
        run: |
          ssh ${{ secrets.USERNAME }}@$DB_HOST "
            export PGPASSWORD='$DB_PASSWORD'
            psql -U $DB_USER -h $DB_HOST -p 5432 -c 'CREATE DATABASE \"$DB_NAME\"' || true
            psql -U $DB_USER -d $DB_NAME -h $DB_HOST -p 5432 -c 'SELECT 1'
          "

      # 🧹 DB 초기화 및 세팅
      - name: 🧹 Setup Database
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.DB_HOST }} "
            export PGPASSWORD='${{ secrets.DB_PASSWORD }}'
            psql -U ${{ secrets.DB_USER }} -h ${{ secrets.DB_HOST }} -p 5432 postgres << EOF
              ALTER USER ${{ secrets.DB_USER }} WITH SUPERUSER CREATEDB CREATEROLE LOGIN;
              SELECT pg_terminate_backend(pid)
              FROM pg_stat_activity
              WHERE datname = 'fit' AND pid <> pg_backend_pid();
              DROP DATABASE IF EXISTS fit;
              CREATE DATABASE fit;
              ALTER DATABASE fit OWNER TO ${{ secrets.DB_USER }};
              GRANT ALL PRIVILEGES ON DATABASE fit TO ${{ secrets.DB_USER }};
            EOF

            psql -U ${{ secrets.DB_USER }} -d fit -h ${{ secrets.DB_HOST }} -p 5432 << EOF
              DROP SCHEMA IF EXISTS public CASCADE;
              CREATE SCHEMA public;
              ALTER SCHEMA public OWNER TO ${{ secrets.DB_USER }};
              GRANT ALL ON SCHEMA public TO ${{ secrets.DB_USER }};
              CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
              DROP TABLE IF EXISTS chat_room_users CASCADE;
            EOF
          "

      # 🚀 EC2로 배포
      - name: 🚀 Deploy to EC2
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          # Nginx 설정 업로드 및 적용
          ssh $USERNAME@$DB_HOST "mkdir -p ~/nginx-config && chmod 755 ~/nginx-config"
          ssh $USERNAME@$DB_HOST "sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled"
          scp nginx-config/fit-blue.conf nginx-config/fit-green.conf $USERNAME@$DB_HOST:~/
          ssh $USERNAME@$DB_HOST "
            sudo mv ~/fit-*.conf /etc/nginx/sites-available/
          "

          # 현재 실행 포트 확인 및 Blue-Green 포트 결정
          CURRENT_PORT=$(ssh $USERNAME@$DB_HOST "curl -s localhost/port || echo $BLUE_PORT")
          if [ \"$CURRENT_PORT\" = \"$BLUE_PORT\" ]; then
            NEW_PORT=$GREEN_PORT
            NEW_ENV="green"
          else
            NEW_PORT=$BLUE_PORT
            NEW_ENV="blue"
          fi

          # .env 파일 업로드 및 새 컨테이너 실행
          scp .env $USERNAME@$DB_HOST:~/

          ssh $USERNAME@$DB_HOST "
            sudo docker stop fit-blue fit-green || true
            sudo docker rm fit-blue fit-green || true
            sudo docker system prune -a --volumes -f
            sudo docker pull $DOCKER_USERNAME/fit-be:$GITHUB_SHA

            sudo docker run -d --name fit-$NEW_ENV \
              -p $NEW_PORT:3000 \
              -v ~/\.env:/usr/src/app/.env \
              -e APP_PORT=$NEW_PORT \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --restart unless-stopped \
              $DOCKER_USERNAME/fit-be:$GITHUB_SHA

            # 네트워크 연결
            echo '🔌 네트워크 및 Redis 연결 중...'
            sudo docker network connect fit-network fit-$NEW_ENV || true
            sudo docker network connect redis-network fit-$NEW_ENV || true

            sudo ln -sf /etc/nginx/sites-available/fit-$NEW_ENV.conf /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
          "
