name: Deploy Backend Application # Î∞±ÏóîÎìú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞∞Ìè¨

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'nginx-config/**'
      - 'docker-compose.yml'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # üì¶ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # üîß Node.js ÏÑ§Ï†ï
      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # üîê DockerHub Î°úÍ∑∏Ïù∏
      - name: üîê Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
      - name: üê≥ Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fit-be:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/fit-be:latest

      # üîë SSH ÌÇ§ ÏÑ§Ïπò
      - name: üîë Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # üîê SSH ÏÑ§Ï†ï Î∞è .env ÏÉùÏÑ±
      - name: üîê Configure SSH and Create .env
        run: |
          # SSH ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Î∞è Í∂åÌïú ÏÑ§Ï†ï
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # SSH ÌÇ§ ÌååÏùº ÏÉùÏÑ± Î∞è ÌòïÏãù Í≤ÄÏ¶ù
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/fit-key.pem
          chmod 600 ~/.ssh/fit-key.pem

          # SSH ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
          cat > ~/.ssh/config << EOL
          Host ${{ secrets.DB_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/fit-key.pem
            StrictHostKeyChecking no
            ServerAliveInterval 30
            PreferredAuthentications publickey
          EOL
          chmod 600 ~/.ssh/config

          # .env ÌååÏùº ÏÉùÏÑ±
          echo "${{ secrets.ENV_FILE }}" > .env

          # ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ï∂úÎ†•
          echo "=== SSH Debug Info ==="
          echo "SSH Key exists: $(ls -la ~/.ssh/fit-key.pem)"
          echo "SSH Key permissions: $(stat -c %a ~/.ssh/fit-key.pem)"
          echo "SSH Config contents:"
          cat ~/.ssh/config
          echo "=== End SSH Debug Info ==="

      # üß™ DB ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏
      - name: üß™ Check Database Server Status
        run: |
          echo "=== SSH Connection Test ==="
          echo "Host: ${{ secrets.DB_HOST }}"
          echo "User: ubuntu"
          echo "Key file: $(ls -la ~/.ssh/fit-key.pem)"

          echo "=== Attempting SSH Connection ==="
          ssh -vvv -i ~/.ssh/fit-key.pem ubuntu@${{ secrets.DB_HOST }} \
          "echo 'SSH connection successful' || echo 'SSH connection failed'"

          echo "=== Checking PostgreSQL Status ==="
          ssh ubuntu@${{ secrets.DB_HOST }} "
            echo 'PostgreSQL status:'
            sudo systemctl status postgresql || echo 'PostgreSQL service not found'
            
            echo 'PostgreSQL port:'
            sudo netstat -tulpn | grep postgres || echo 'No PostgreSQL process found'
            
            echo 'PostgreSQL config:'
            sudo cat /etc/postgresql/*/main/postgresql.conf | grep listen_addresses || echo 'No PostgreSQL config found'
          "

      # üßπ DB Ï¥àÍ∏∞Ìôî Î∞è ÏÑ∏ÌåÖ
      - name: üßπ Setup Database
        run: |
          echo "=== Setting up Database ==="
          ssh ubuntu@${{ secrets.DB_HOST }} "
            # ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏
            sudo apt-get update
            
            # PostgreSQL ÏÑ§Ïπò ÌôïÏù∏
            if ! command -v psql &> /dev/null; then
              echo 'Installing PostgreSQL...'
              sudo apt-get install -y postgresql postgresql-contrib
            fi
            
            # PostgreSQL ÏÑ§Ï†ï Î≥ÄÍ≤Ω
            sudo sed -i \"s/#listen_addresses = 'localhost'/listen_addresses = '*'/\" /etc/postgresql/*/main/postgresql.conf
            
            # pg_hba.confÏóê ÏõêÍ≤© Ï†ëÏÜç Í∑úÏπô Ï∂îÍ∞Ä
            echo 'host    all             all             0.0.0.0/0               scram-sha-256' | sudo tee -a /etc/postgresql/*/main/pg_hba.conf
            
            # Î∞©ÌôîÎ≤Ω ÏÑ§Ï†ï
            if command -v ufw &> /dev/null; then
              sudo ufw allow 5432/tcp
            fi
            
            # PostgreSQL Ïû¨ÏãúÏûë
            sudo systemctl restart postgresql
            
            # PostgreSQL ÏÉÅÌÉú ÌôïÏù∏
            echo 'PostgreSQL status:'
            sudo systemctl status postgresql
            
            # PostgreSQL ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
            sudo -u postgres psql -c \"CREATE USER myuser WITH PASSWORD '${{ secrets.DB_PASSWORD }}' SUPERUSER;\"
            
            export PGPASSWORD='${{ secrets.DB_PASSWORD }}'
            
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
            psql -U myuser -h ${{ secrets.DB_HOST }} -p 5432 postgres << 'EOF'
              ALTER USER myuser WITH SUPERUSER CREATEDB CREATEROLE LOGIN;
              SELECT pg_terminate_backend(pid)
              FROM pg_stat_activity
              WHERE datname = 'fit' AND pid <> pg_backend_pid();
              DROP DATABASE IF EXISTS fit;
              CREATE DATABASE fit;
              ALTER DATABASE fit OWNER TO myuser;
              GRANT ALL PRIVILEGES ON DATABASE fit TO myuser;
            EOF

            psql -U myuser -d fit -h ${{ secrets.DB_HOST }} -p 5432 << 'EOF'
              DROP SCHEMA IF EXISTS public CASCADE;
              CREATE SCHEMA public;
              ALTER SCHEMA public OWNER TO myuser;
              GRANT ALL ON SCHEMA public TO myuser;
              CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
            EOF
          "

      # üöÄ EC2Î°ú Î∞∞Ìè¨
      - name: üöÄ Deploy to EC2
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          # Nginx ÏÑ§Ï†ï ÏóÖÎ°úÎìú Î∞è Ï†ÅÏö©
          ssh $USERNAME@$DB_HOST "mkdir -p ~/nginx-config && chmod 755 ~/nginx-config"
          ssh $USERNAME@$DB_HOST "sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled"
          scp nginx-config/fit-blue.conf nginx-config/fit-green.conf $USERNAME@$DB_HOST:~/
          ssh $USERNAME@$DB_HOST "
            sudo mv ~/fit-*.conf /etc/nginx/sites-available/
          "

          # ÌòÑÏû¨ Ïã§Ìñâ Ìè¨Ìä∏ ÌôïÏù∏ Î∞è Blue-Green Ìè¨Ìä∏ Í≤∞Ï†ï
          CURRENT_PORT=$(ssh $USERNAME@$DB_HOST "curl -s localhost/port || echo $BLUE_PORT")
          if [ \"$CURRENT_PORT\" = \"$BLUE_PORT\" ]; then
            NEW_PORT=$GREEN_PORT
            NEW_ENV="green"
          else
            NEW_PORT=$BLUE_PORT
            NEW_ENV="blue"
          fi

          # .env ÌååÏùº ÏóÖÎ°úÎìú Î∞è ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
          scp .env $USERNAME@$DB_HOST:~/
          scp docker/docker-compose.yml $USERNAME@$DB_HOST:~/

          ssh $USERNAME@$DB_HOST "
            export DOCKER_USERNAME=$DOCKER_USERNAME
            docker-compose -f ~/docker-compose.yml pull
            docker-compose -f ~/docker-compose.yml up -d app-$NEW_ENV redis-$NEW_ENV

            sudo ln -sf /etc/nginx/sites-available/fit-$NEW_ENV.conf /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
          "
