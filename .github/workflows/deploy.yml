name: Deploy Backend Application

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'docker/nginx/**'
      - 'docker/docker-compose.yml'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 📦 코드 체크아웃
      - name: 📦 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 🔧 Node.js 설정
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # 🔐 DockerHub 로그인
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 🐳 Docker 이미지 빌드 및 푸시
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fit-be:latest
          cache-to: type=inline
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fit-be:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/fit-be:latest

      # 🧹 도커 이미지 정리
      - name: 🧹 Clean up Docker images
        run: |
          ssh ubuntu@$postgres "
            # 디스크 사용량 확인
            echo '현재 디스크 사용량:'
            df -h
            # 실행 중이지 않은 컨테이너만 삭제
            docker container prune -f || true
            # 사용하지 않는 볼륨만 삭제
            docker volume prune -f || true
            # 사용하지 않는 이미지만 삭제
            docker image prune -f || true
            # 정리 후 디스크 사용량 확인
            echo '정리 후 디스크 사용량:'
            df -h
          "

      # 🚀 EC2로 배포
      - name: 🚀 Deploy to EC2
        run: |
          # Nginx 설정 업로드
          echo "📦 Nginx 설정 업로드 시작..."
          scp docker/nginx/*.conf ubuntu@$postgres:/home/ubuntu/nginx/

          # 환경 설정 파일 업로드
          echo "📦 환경 설정 파일 업로드 중..."
          scp .env ubuntu@$postgres:/home/ubuntu/
          scp -r blue green ubuntu@$postgres:/home/ubuntu/
          scp docker/docker-compose.yml ubuntu@$postgres:/home/ubuntu/

          # 새 환경 결정 (이미 EC2에서 실행 중인 환경 확인)
          echo "🔍 현재 실행 환경 확인 중..."
          CURRENT_ENV=$(ssh ubuntu@$postgres "docker ps | grep -q 'fit-blue' && echo 'blue' || echo 'green'")
          echo "📌 현재 환경: $CURRENT_ENV"

          # 새 환경 및 포트 결정
          if [ "$CURRENT_ENV" = "blue" ]; then
            NEW_ENV="green"
            NEW_PORT=3001
          else
            NEW_ENV="blue"
            NEW_PORT=3000
          fi
          echo "📌 새 환경: $NEW_ENV (포트: $NEW_PORT)"

          # EC2에서 Docker Compose로 앱 및 Nginx 재시작
          ssh ubuntu@$postgres "
            echo '🔄 Docker Compose 업데이트 중...'
            sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            echo '🔄 이미지 다운로드 중...'
            docker-compose -f /home/ubuntu/docker-compose.yml pull --quiet

            echo '🚀 앱 컨테이너 시작 중...'
            docker-compose -f /home/ubuntu/docker-compose.yml up -d app-$NEW_ENV redis-$NEW_ENV postgres

            # 앱 상태 확인
            echo '🔍 앱 상태 확인 중...'
            timeout 60 bash -c 'until curl -s http://localhost:$NEW_PORT/health; do echo \"앱 대기 중...\"; sleep 5; done'

            # Nginx 설정 적용
            echo '🔄 Nginx 설정 적용 중...'
            cp /home/ubuntu/nginx/fit-$NEW_ENV.conf /home/ubuntu/nginx/default.conf
            cp /home/ubuntu/nginx/api.conf /home/ubuntu/nginx/api.conf

            # Nginx 컨테이너 시작 또는 재시작
            docker-compose -f /home/ubuntu/docker-compose.yml up -d nginx

            # 시스템 상태 확인
            echo '🔍 전체 컨테이너 상태 확인 중...'
            docker-compose -f /home/ubuntu/docker-compose.yml ps
          "
