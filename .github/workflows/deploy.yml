name: Deploy Backend Application # 배포 워크플로우

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'docker/nginx/**'
      - 'docker/docker-compose.yml'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 📦 코드 체크아웃
      - name: 📦 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 🔧 Node.js 설정
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # 🔑 SSH 키 설치
      - name: 🔑 Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 🔐 SSH 설정 및 테스트
      - name: 🔐 Configure SSH and Test Connection
        run: |
          # SSH 디렉토리 생성 및 권한 설정
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # SSH 키 파일 생성
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/fit-key.pem
          chmod 600 ~/.ssh/fit-key.pem

          # SSH 설정 파일 생성
          cat > ~/.ssh/config << EOL
          Host ${{ secrets.DB_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/fit-key.pem
            StrictHostKeyChecking no
            ServerAliveInterval 30
          EOL
          chmod 600 ~/.ssh/config

          # 환경 변수 파일 생성
          mkdir -p blue green

          # 공통 환경 변수 파일 생성
          echo "${{ secrets.ENV_FILE_COMMON }}" > .env

          # Blue 환경 변수 파일 생성
          echo "${{ secrets.ENV_FILE_BLUE }}" > blue/.env.blue
          cat .env >> blue/.env.blue

          # Green 환경 변수 파일 생성
          echo "${{ secrets.ENV_FILE_GREEN }}" > green/.env.green
          cat .env >> green/.env.green

          # SSH 연결 테스트
          ssh -i ~/.ssh/fit-key.pem ubuntu@${{ secrets.DB_HOST }} "echo 'SSH connection successful'"

      # 🔐 DockerHub 로그인
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 🐳 Docker 이미지 빌드 및 푸시
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fit-be:latest
          cache-to: type=inline
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fit-be:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/fit-be:latest

      # 🧹 도커 이미지 정리
      - name: 🧹 Clean up Docker images
        run: |
          ssh ubuntu@${{ secrets.DB_HOST }} "
            # 이전 prune 작업이 있는지 확인하고 대기 (최대 1분)
            timeout 60 bash -c 'while docker system df | grep -q \"prune\"; do sleep 5; done'
            
            # 디스크 사용량 확인
            echo '현재 디스크 사용량:'
            df -h
            
            # 실행 중이지 않은 컨테이너만 삭제
            docker container prune -f || true
            
            # 사용하지 않는 볼륨만 삭제
            docker volume prune -f || true
            
            # 사용하지 않는 이미지만 삭제
            docker image prune -f || true
            
            # 정리 후 디스크 사용량 확인
            echo '정리 후 디스크 사용량:'
            df -h
          "

      # 🚀 EC2로 배포
      - name: 🚀 Deploy to EC2
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          USERNAME: ubuntu
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Nginx 설정 업로드 및 적용
          echo "📦 Nginx 설정 업로드 시작..."
          ssh ubuntu@$DB_HOST "mkdir -p ~/nginx"
          
          # Nginx 설정 파일 업로드
          scp docker/nginx/*.conf ubuntu@$DB_HOST:~/nginx/
          
          # 현재 실행 포트 확인 및 Blue-Green 포트 결정
          echo "🔍 현재 실행 포트 확인 중..."
          CURRENT_PORT=$(ssh ubuntu@$DB_HOST "curl -s localhost/port || echo $BLUE_PORT")
          CURRENT_PORT=$(echo "$CURRENT_PORT" | tr -d '\r' | tr -d '\n')
          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT=$GREEN_PORT
            NEW_ENV="green"
          else
            NEW_PORT=$BLUE_PORT
            NEW_ENV="blue"
          fi
          echo "📌 새 환경: $NEW_ENV (포트: $NEW_PORT)"

          # .env 파일 업로드 및 새 컨테이너 실행
          echo "📦 환경 설정 파일 업로드 중..."
          scp .env ubuntu@$DB_HOST:~/
          scp -r blue green ubuntu@$DB_HOST:~/
          scp docker/docker-compose.yml ubuntu@$DB_HOST:~/

          echo "🚀 새 컨테이너 시작 중..."
          ssh ubuntu@$DB_HOST "
            export DOCKER_USERNAME=$DOCKER_USERNAME
            export DB_PASSWORD=$DB_PASSWORD
            echo '🔄 Docker Compose 업데이트 중...'
            sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose --retry 3 --retry-delay 5
            sudo chmod +x /usr/local/bin/docker-compose
            echo '🔄 이미지 다운로드 중...'
            docker-compose -f ~/docker-compose.yml pull --quiet
            echo '🚀 컨테이너 시작 중...'
            docker-compose -f ~/docker-compose.yml up -d app-$NEW_ENV redis-$NEW_ENV postgres
            
            # Nginx 설정 적용
            echo '🔄 Nginx 설정 적용 중...'
            
            # 기존 active_conf 파일로 저장
            if [ -f /etc/nginx/sites-enabled/default ]; then
              ACTIVE_CONF=\$(readlink -f /etc/nginx/sites-enabled/default)
              cp \$ACTIVE_CONF ~/nginx/current.conf
            fi
            
            # 새로 배포되는 환경에 맞는 Nginx 설정 적용
            cp ~/nginx/fit-$NEW_ENV.conf ~/nginx/default.conf
            
            # Nginx 컨테이너 시작 또는 재시작
            docker-compose -f ~/docker-compose.yml up -d nginx
            
            # 컨테이너 상태 확인
            echo '🔍 컨테이너 상태 확인 중...'
            docker-compose -f ~/docker-compose.yml ps
            
            echo '✅ 배포 완료'
          "
