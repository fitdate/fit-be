name: Deploy Backend Application

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts' # TypeScript 파일 변경 감지
      - 'package*.json' # 패키지 관련 파일
      - 'tsconfig*.json' # TypeScript 설정 파일
      - '.env.example' # 환경 설정 예제 파일
      - 'nest-cli.json' # NestJS 설정 파일
      - '.github/workflows/**' # 워크플로우 파일
      - '!frontend/**' # frontend 디렉토리 제외

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH and Create .env
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "${{ secrets.ENV_FILE }}" > .env

      # Optional: 디버깅 용도로 develop 브랜치에서만 실행
      - name: Debug tar and SSH pipeline
        if: github.ref == 'refs/heads/develop'
        run: |
          tar czf - ./* .env | tee tar_output.log | ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "cat > ~/fit-green/deployment.tar"
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "ls -l ~/fit-green"
          cat tar_output.log

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          CURRENT_PORT=$(ssh $USERNAME@$HOST "curl -s localhost/port || echo $BLUE_PORT")

          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT="$GREEN_PORT"
            NEW_ENV="green"
            CURRENT_ENV="blue"
          else
            NEW_PORT="$BLUE_PORT"
            NEW_ENV="blue"
            CURRENT_ENV="green"
          fi

          NEW_DIR="~/fit-$NEW_ENV"
          CURRENT_DIR="~/fit-$CURRENT_ENV"

          # 배포 디렉토리 생성 및 기존 제거
          ssh $USERNAME@$HOST "mkdir -p $NEW_DIR && rm -rf $NEW_DIR/* || true"

          # 압축 전송 및 압축 해제
          tar czf - ./* .env | ssh $USERNAME@$HOST "tar xzf - -C $NEW_DIR"

          # 빌드 및 PM2 배포
          ssh $USERNAME@$HOST "
            cd $NEW_DIR && \
            npm ci && \
            npm run build && \
            pm2 delete fit-$NEW_ENV 2>/dev/null || true && \
            APP_PORT=$NEW_PORT pm2 start dist/main.js --name fit-$NEW_ENV --max-memory-restart 1G && \
            sudo ln -sf /etc/nginx/sites-available/fit-$NEW_ENV.conf /etc/nginx/sites-enabled/ && \
            sudo nginx -t && \
            sudo systemctl reload nginx && \
            sleep 5 && \
            if curl -s http://localhost:$NEW_PORT/health; then
              pm2 delete fit-$CURRENT_ENV 2>/dev/null || true && \
              sudo rm -f /etc/nginx/sites-enabled/fit-$CURRENT_ENV.conf && \
              echo '✅ 배포 성공'
            else
              pm2 delete fit-$NEW_ENV && \
              echo '❌ 배포 실패: 헬스 체크 실패' && \
              exit 1
            fi
          "
