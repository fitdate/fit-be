name: Deploy Backend Application

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH and Create .env
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "ServerAliveInterval 30" >> ~/.ssh/config
          echo "ServerAliveCountMax 60" >> ~/.ssh/config
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          # SSH 연결 테스트
          ssh -o ConnectTimeout=10 $USERNAME@$HOST "echo 'SSH connection test successful'"

          CURRENT_PORT=$(ssh $USERNAME@$HOST "curl -s localhost/port || echo $BLUE_PORT")

          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT="$GREEN_PORT"
            NEW_ENV="green"
            CURRENT_ENV="blue"
          else
            NEW_PORT="$BLUE_PORT"
            NEW_ENV="blue"
            CURRENT_ENV="green"
          fi

          NEW_DIR="~/fit-$NEW_ENV"
          CURRENT_DIR="~/fit-$CURRENT_ENV"

          echo "🔄 Creating deployment directory..."
          ssh $USERNAME@$HOST "mkdir -p $NEW_DIR && rm -rf $NEW_DIR/* || true"

          echo "📦 Transferring files..."
          tar czf - ./* .env | ssh $USERNAME@$HOST "cd $NEW_DIR && tar xzf -"

          echo "🚀 Building and deploying..."
          ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=60 $USERNAME@$HOST "
            set -e
            cd $NEW_DIR

            echo '📦 Installing dependencies...'
            npm uninstall @nestjs/terminus
            npm install @nestjs-modules/ioredis@latest --save
            npm ci --verbose

            echo '🔨 Building application...'
            NODE_ENV=production nest build --debug || {
              echo '❌ Build failed with nest build. Trying with tsc...'
              ./node_modules/.bin/tsc -p tsconfig.build.json
              echo '📁 Compiled files in dist:'
              find dist/ -type f
              exit 1
            }

            echo '📝 Checking build output...'
            if [ ! -f dist/main.js ]; then
              echo '❌ Build failed: dist/main.js not found'
              ls -la
              ls -la dist/ || true
              exit 1
            fi

            echo '🚀 Starting PM2...'
            pm2 delete fit-$NEW_ENV 2>/dev/null || true
            APP_PORT=$NEW_PORT pm2 start dist/main.js --name fit-$NEW_ENV --max-memory-restart 1G

            echo '🔄 Configuring Nginx...'
            sudo ln -sf /etc/nginx/sites-available/fit-$NEW_ENV.conf /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx

            echo '🏥 Health checking...'
            for i in {1..12}; do
              if curl -s http://localhost:$NEW_PORT/health; then
                pm2 delete fit-$CURRENT_ENV 2>/dev/null || true
                sudo rm -f /etc/nginx/sites-enabled/fit-$CURRENT_ENV.conf
                echo '✅ 배포 성공'
                exit 0
              fi
              echo 'Waiting for health check... attempt $i'
              sleep 5
            done

            echo '❌ 배포 실패: 헬스 체크 실패'
            pm2 delete fit-$NEW_ENV
            exit 1
          "
