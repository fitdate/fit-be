name: Deploy Backend Application # 백엔드 배포

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.env.example'
      - 'nest-cli.json'
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'nginx-config/**'
      - '!frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH and Create .env
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "ServerAliveInterval 30" >> ~/.ssh/config
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build Docker image
        run: |
          docker build -t fit-be:$GITHUB_SHA .
          docker tag fit-be:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/fit-be:$GITHUB_SHA
          docker tag fit-be:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/fit-be:latest

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fit-be:$GITHUB_SHA
          docker push ${{ secrets.DOCKER_USERNAME }}/fit-be:latest

      - name: Test Database Connection
        run: |
          if [ -z "${{ secrets.DB_HOST }}" ]; then
            echo "❌ DB_HOST environment variable is not set"
            exit 1
          fi
          echo "Testing database connection to ${{ secrets.DB_HOST }}:5432"
          nc -zv ${{ secrets.DB_HOST }} 5432 || {
            echo "❌ Database connection test failed"
            exit 1
          }
          echo "✅ Database connection test successful"

      - name: Deploy to EC2
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          BLUE_PORT: 3000
          GREEN_PORT: 3001
        run: |
          ssh -o ConnectTimeout=10 $USERNAME@$DB_HOST "echo 'SSH connection test successful'"

          # Nginx 설정 업로드
          ssh $USERNAME@$DB_HOST "mkdir -p ~/nginx-config && chmod 755 ~/nginx-config"
          ssh $USERNAME@$DB_HOST "sudo mkdir -p /etc/nginx/sites-available"
          scp nginx-config/fit-blue.conf $USERNAME@$DB_HOST:~/fit-blue.conf
          scp nginx-config/fit-green.conf $USERNAME@$DB_HOST:~/fit-green.conf
          ssh $USERNAME@$DB_HOST "sudo mv ~/fit-blue.conf /etc/nginx/sites-available/ && sudo mv ~/fit-green.conf /etc/nginx/sites-available/"
          ssh $USERNAME@$DB_HOST "sudo mkdir -p /etc/nginx/sites-enabled"

          # 현재 실행 중인 포트 확인
          CURRENT_PORT=$(ssh $USERNAME@$DB_HOST "curl -s localhost/port || echo $BLUE_PORT")
          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT=$GREEN_PORT
            NEW_ENV="green"
            CURRENT_ENV="blue"
          else
            NEW_PORT=$BLUE_PORT
            NEW_ENV="blue"
            CURRENT_ENV="green"
          fi

          # .env 파일 전송
          scp .env $USERNAME@$DB_HOST:~/

          # Blue-Green 배포
          ssh $USERNAME@$DB_HOST "
            set -e

            echo '🧹 기존 프로세스 정리 중...'
            sudo kill -9 \$(sudo lsof -t -i:3000) 2>/dev/null || true
            sudo kill -9 \$(sudo lsof -t -i:3001) 2>/dev/null || true
            sudo docker stop fit-blue fit-green 2>/dev/null || true
            sudo docker rm fit-blue fit-green 2>/dev/null || true
            
            echo '🧹 사용하지 않는 도커 리소스 정리 중...'
            sudo docker system prune -a --volumes -f

            echo '🗑️ 기존 테이블 삭제 중...'
            PGPASSWORD=\$DB_PASSWORD psql -h \$DB_HOST -U \$DB_USERNAME -d \$DB_DATABASE -c \"DROP TABLE IF EXISTS chat_room_users CASCADE;\"

            echo '🐳 Docker 이미지 다운로드 중...'
            sudo docker pull $DOCKER_USERNAME/fit-be:$GITHUB_SHA

            echo '🚀 새 컨테이너 시작 중...'
            sudo docker run -d --name fit-$NEW_ENV \
              -p $NEW_PORT:3000 \
              -v ~/.env:/usr/src/app/.env \
              -e APP_PORT=$NEW_PORT \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --restart unless-stopped \
              $DOCKER_USERNAME/fit-be:$GITHUB_SHA
              
            echo '🔌 네트워크 연결 중...'
            sudo docker network connect fit-network fit-$NEW_ENV || true
            sudo docker network connect redis-network fit-$NEW_ENV || true

            echo '🔍 컨테이너 상태 확인 중...'
            CONTAINER_STATUS=\$(sudo docker inspect -f '{{.State.Status}}' fit-$NEW_ENV)
            if [ \"\$CONTAINER_STATUS\" != \"running\" ]; then
              echo '❌ 컨테이너 실행 실패' > ~/deploy-error.log
              sudo docker logs fit-$NEW_ENV >> ~/deploy-error.log
              exit 1
            fi

            echo '🔄 Nginx 설정 업데이트 중...'
            sudo ln -sf /etc/nginx/sites-available/fit-$NEW_ENV.conf /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx

            echo '🏥 헬스 체크 중...'
            for i in {1..3}; do
              if curl -s -f http://localhost:$NEW_PORT/health | grep -q 'ok'; then
                sudo docker stop fit-$CURRENT_ENV 2>/dev/null || true
                sudo docker rm fit-$CURRENT_ENV 2>/dev/null || true
                sudo rm -f /etc/nginx/sites-enabled/fit-$CURRENT_ENV.conf
                sudo nginx -t && sudo systemctl reload nginx
                echo '✅ 배포 성공'
                exit 0
              fi
              sleep 5
            done

            echo '❌ 헬스 체크 실패' > ~/deploy-error.log
            sudo docker logs fit-$NEW_ENV >> ~/deploy-error.log
            sudo docker stop fit-$NEW_ENV
            sudo docker rm fit-$NEW_ENV
            exit 1
          "
