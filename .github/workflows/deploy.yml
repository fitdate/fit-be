name: Deploy Backend Application

on:
  push:
    branches: [main, develop] # main 또는 develop 브랜치에 push가 발생하면 실행
    paths: # 백엔드 코드가 변경될 때만 실행
      - '**'
      - '.github/workflows/**'
      - '!frontend/**' # 프론트엔드 디렉토리 제외

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub Actions가 실행될 환경

    steps:
      # 레포지토리 코드를 체크아웃
      - uses: actions/checkout@v3

      # Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Node.js 버전 20 사용
          cache: 'npm' # npm 캐시를 사용하여 설치 속도 향상

      # EC2 접속을 위한 SSH 키 설정
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # GitHub secrets에 저장된 SSH 프라이빗 키

      # EC2에 배포 실행
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }} # EC2 퍼블릭 IP 주소
          USERNAME: ${{ secrets.USERNAME }} # EC2 접속 사용자명 (예: ubuntu)
        run: |
          # SSH 호스트 키 검증 스킵 설정 (초기 접속 시 yes/no 물어보는 것 방지)
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          # 현재 실행 중인 서버의 포트 확인 (blue/green 중 어떤 환경이 실행 중인지)
          CURRENT_PORT=$(ssh $USERNAME@$HOST "curl -s localhost/port")

          # Blue/Green 배포를 위한 새로운 포트 설정
          # 현재 Blue(3000)가 실행 중이면 Green(3001)으로, 그 반대면 Blue로 배포
          if [ "$CURRENT_PORT" = "$BLUE_PORT" ]; then
            NEW_PORT="$GREEN_PORT"
            NEW_ENV="green"
            CURRENT_ENV="blue"
          else
            NEW_PORT="$BLUE_PORT"
            NEW_ENV="blue"
            CURRENT_ENV="green"
          fi

          # 소스 코드와 환경 변수 파일을 EC2의 새로운 환경 디렉토리로 전송
          scp -r ./* .env $USERNAME@$HOST:~/app-$NEW_ENV

          # EC2에서 배포 스크립트 실행
          ssh $USERNAME@$HOST "cd ~/app-$NEW_ENV && \
            npm install && \  # 의존성 설치
            npm run build && \  # 프로젝트 빌드
            APP_PORT=$NEW_PORT pm2 start dist/main.js --name fit-$NEW_ENV && \  # PM2로 새로운 버전 실행
            sudo rm /etc/nginx/sites-enabled/fit-$CURRENT_ENV && \  # 이전 Nginx 설정 제거
            sudo ln -s /etc/nginx/sites-available/fit-$NEW_ENV /etc/nginx/sites-enabled/ && \  # 새로운 Nginx 설정 활성화
            sudo nginx -t && \  # Nginx 설정 문법 검사
            sudo systemctl reload nginx"  # Nginx 설정 리로드
